"""Prompts for the task decomposition workflow."""

PROMPTS = {
    "system_prompt": (
        "You are an expert software architect and technical lead specializing in breaking down complex "
        "features into small, manageable tasks. You excel at creating detailed, actionable subtasks "
        "with clear acceptance criteria. You understand software development best practices and "
        "focus on creating tasks that follow the Single Responsibility Principle."
    ),
    "generate_issues": (
        "Your task is to create a list of user stories for a requested feature.\n"
        "Feature: {issue_spec}\n"
        "A repository has already been checked out for you. Examine the existing code and then think through, "
        "step by step, which user stories are needed to implement the feature.\n"
        "Generate user stories in the order they need to be implemented.\n"
        "IMPORTANT: It is VITAL that you avoid over-engineering. The feature should be fully implemented but "
        "you must avoid unnecessary complexity.\n"
        "For each user story, you must provide:\n"
        "1. A clear, specific title\n"
        "2. A description that contains a user story in the format of "
        "'As a [role], I want [feature] so that [benefit].'\n"
        "3. Any additional information that is needed to understand the context of the user story.\n"
        "Keep in mind that user stories are written from the perspective of the end user of the product, "
        "NOT the development team.\n"
    ),
    "validate_issues": (
        "A project manager has created a list of user stories for a requested feature. Please review them and "
        "determine if they should be accepted or rejected.\n"
        "This is the feature to be implemented:\n"
        "{issue_spec}\n"
        "The feature has been broken down into the following user stories:\n"
        "{issues}\n"
        "Consider the user stories as a whole and determine if they comprehensively cover the feature.\n"
        "Carefully consider each user story and determine if it:\n"
        "1. Makes sense and is an essential part of the feature\n"
        "2. Is not over-engineered\n"
        "3. Does not overlap with other user stories\n"
        "4. Is arranged in the correct order\n"
        "If any problems are found, provide an updated list of user stories that are valid.\n"
        "If there none of the problems above are found, use the 'approve_issues' tool to approve the user stories. "
        "Do not generate new user stories if the only improvements are minor wording changes.\n"
    ),
    "decompose_feature": (
        "You are creating user stories and subtasks as part of a plan to implement the following feature: "
        "{issue_spec}\n"
        "The feature has been broken down into the following user stories:\n"
        "{issues}\n"
        "The specific user story you are planning to implement is: {feature_spec}\n"
        "A repository has already been checked out for you. Examine the existing code and then think through, "
        "step by step, which tasks are needed to implement the user story.\n"
        "For each task, you must provide:\n"
        "1. A clear, specific title\n"
        "2. A detailed description of the work required\n"
        "3. Quantifiable acceptance criteria that can be verified through automated tests\n\n"
        "Guidelines for task breakdown:\n"
        "- Each task should follow the Single Responsibility Principle - do one thing and do it well\n"
        "- Tasks should represent a single logical change (e.g., one schema change, one API endpoint)\n"
        "- Tasks should be independently testable with specific test cases\n"
        "- Each acceptance criterion must be measurable through unit tests, integration tests, or E2E tests\n"
        "- Tasks should be small enough that their implementation approach is clear\n"
        "- Consider separation of concerns (e.g., separate backend/frontend/database tasks)\n"
        "- Include necessary setup/infrastructure tasks\n"
        "- Tasks should be specific and focused\n"
        "- Tasks should include detailed steps\n"
        "- Every task must be a clear, actionable software development task that results in a code change\n"
        "- Consider using try logic to handle potential exceptions appropriately\n\n"
        "IMPORTANT: It is VITAL that you avoid over-engineering. The feature should be fully implemented but "
        "you must avoid unnecessary complexity. Do not include tasks that are not directly related to the feature. "
        "Do not include functionality beyond the user story.\n"
        "IMPORTANT: Make sure each task is discrete and doesn't overlap with other tasks.\n"
    ),
    "validate_subtasks": (
        "Review the following subtasks to ensure they meet these criteria:\n"
        "1. Each task follows the Single Responsibility Principle\n"
        "2. Each task represents a single logical change\n"
        "3. Each acceptance criterion is quantifiably measurable through automated tests\n"
        "4. Test coverage requirements are explicitly specified\n"
        "5. Performance criteria are measurable where applicable\n"
        "6. No critical aspects of the feature are missing\n"
        "7. Each task requires a code change\n\n"
        "Subtasks to validate:\n{subtasks}\n\n"
        "If any issues are found, provide specific recommendations for improvement."
    ),
    "regenerate_subtasks": (
        "You are creating user stories and subtasks as part of a plan to implement the following feature: "
        "{issue_spec}\n"
        "A user story has been broken down into subtasks but some were deemed invalid.\n"
        "Your task is to regenerate the subtasks based on the feedback provided.\n"
        "The feature has been broken down into the following user stories:\n"
        "{issues}\n"
        "The specific user story that was broken down into subtasks is: {feature_spec}\n"
        "Original Subtasks: {subtasks}\n"
        "Failed Subtasks: {auditedSubtasks}\n"
        "Feedback: {feedbacks}\n"
        "A repository has already been checked out for you. Examine the existing code and then think through, "
        "step by step, which tasks are needed to implement the user story.\n"
        "For each task, you must provide:\n"
        "1. A clear, specific title\n"
        "2. A detailed description of the work required\n"
        "3. Quantifiable acceptance criteria that can be verified through automated tests\n\n"
        "Guidelines for task breakdown:\n"
        "- Each task should follow the Single Responsibility Principle - do one thing and do it well\n"
        "- Tasks should represent a single logical change (e.g., one schema change, one API endpoint)\n"
        "- Tasks should be independently testable with specific test cases\n"
        "- Each acceptance criterion must be measurable through unit tests, integration tests, or E2E tests\n"
        "- Tasks should be small enough that their implementation approach is clear\n"
        "- Consider separation of concerns (e.g., separate backend/frontend/database tasks)\n"
        "- Include necessary setup/infrastructure tasks\n"
        "- Tasks should be specific and focused\n"
        "- Tasks should include detailed steps\n"
        "- Every task must be a clear, actionable software development task that results in a code change\n"
        "- Consider using try logic to handle potential exceptions appropriately\n\n"
    ),
    "dependency_tasks": (
        "Review the following target task and determine if it depends on any other tasks.\n"
        "Target task: {target_task}\n"
        "Other tasks:\n{subtasks}\n\n"
        "Dependencies should always be one way, marking which tasks a task depends on.\n"
        "If any dependencies are found, link the uuid of the target task "
        "with a list of uuids for any tasks it depends on.\n"
        "IMPORTANT: do not create circular dependencies.\n"
    ),
    "generate_system_prompts": (
        "Your task is to create a comprehensive system prompt that will guide an AI agent in implementing "
        "the entire feature and all its tasks:\n\n"
        "Issue spec: {issue_spec}\n"
        "Issues: {issues}\n"
        "Tasks: {tasks}\n\n"
        "Create a single system prompt that:\n"
        "1. Defines the AI's role and expertise needed for implementing the entire feature\n"
        "2. Provides comprehensive context about the feature, its issues, and all tasks\n"
        "3. Sets clear guidelines and constraints that apply across all tasks\n"
        "4. Specifies coding standards and best practices to follow throughout implementation\n"
        "5. Includes technical requirements and architectural considerations\n"
        "6. Explains how different tasks relate to and depend on each other\n"
        "7. Provides guidance on maintaining consistency across all implementations\n\n"
        "Format the system prompt as follows:\n"
        "---\n"
        "Feature Overview:\n"
        "[High-level description of the feature and its goals]\n\n"
        "AI Role and Expertise:\n"
        "[Define the AI's role and required expertise]\n\n"
        "Implementation Context:\n"
        "[Comprehensive context about the feature and its components]\n\n"
        "Technical Guidelines:\n"
        "- [List technical requirements and architectural guidelines]\n\n"
        "Coding Standards:\n"
        "- [List coding standards and best practices]\n\n"
        "Task Dependencies and Relationships:\n"
        "[Explain how tasks relate to and depend on each other]\n\n"
        "Quality and Testing Requirements:\n"
        "[Specify quality standards and testing requirements]\n"
        "---\n"
    ),
}
